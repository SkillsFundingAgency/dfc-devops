# GitVersion: if a GitVersion config file is required this should be stored at the root of the repo.  If the file doesn't exist GitVersion defaults will be used - https://gitversion.readthedocs.io/en/latest/
parameters:
  SolutionBaseName: ''
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  DotNetCoreVersion: ''
  GitVersionConfigFilePath: Resources/AzureDevOps/GitVersion.yml
  IncludePreviewVersions: false
  PublishWebApp: 'false'

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotNetCoreVersion }}'
   condition: ne('', '${{ parameters.DotNetCoreVersion }}')
   inputs:
     version: ${{ parameters.DotNetCoreVersion }}
     IncludePreviewVersions: ${{ parameters.IncludePreviewVersions }}
     installationPath: $(Agent.TempDirectory)/dotnet
 
 - task: UseGitVersion@5
   displayName: GitVersion
   inputs:
     useConfigFile: true
     configFilePath: ${{ parameters.GitVersionConfigFilePath }}
     versionSpec: '5.3.x'

 # tasks to package a function app
 - task: DotNetCoreCLI@2
   displayName: 'dotnet build application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs:
     command: 'build'
     projects: '${{ parameters.SolutionBaseName }}\${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o $(build.artifactstagingdirectory)\Build\${{ parameters.SolutionBaseName }}\ -c ${{ parameters.BuildConfiguration }}'

 - task: ArchiveFiles@2
   displayName: 'Archive Application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs: 
     rootFolderOrFile: $(build.artifactstagingdirectory)\Build\${{ parameters.SolutionBaseName }}
     archiveFile: $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\DeploymentPackages\${{ parameters.SolutionBaseName }}.zip
     includeRootFolder: false

# task to package a web app
 - task: DotNetCoreCLI@2
   displayName: 'dotnet publish application ${{ parameters.SolutionBaseName }}'
   condition: ${{ parameters.PublishWebApp }}
   inputs:
     command: 'publish'
     projects: '${{ parameters.SolutionBaseName }}\${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\DeploymentPackages\${{ parameters.SolutionBaseName }}\  -c ${{ parameters.BuildConfiguration }}'
     publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

 - task: PublishPipelineArtifact@1
   displayName: 'Publish Artifact: ${{ parameters.SolutionBaseName }}'
   inputs:
     targetPath: $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\
     artifactName: ${{ parameters.SolutionBaseName }}.DeploymentPackages