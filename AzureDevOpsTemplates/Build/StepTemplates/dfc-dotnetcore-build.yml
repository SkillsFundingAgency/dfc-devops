parameters:
  SolutionBaseName: ''
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  DotNetCoreVersion: ''
  IncludePreviewVersions: false
  PublishWebApp: 'false'
  TestSuffix: Tests

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotNetCoreVersion }}'
   condition: ne('', '${{ parameters.DotNetCoreVersion }}')
   inputs:
     version: ${{ parameters.DotNetCoreVersion }}
     IncludePreviewVersions: ${{ parameters.IncludePreviewVersions }}

 - task: gittools.gitversion.gitversion-task.GitVersion@4
   displayName: GitVersion
   inputs:
     preferBundledVersion: false

 # tasks to package a function app
 - task: DotNetCoreCLI@2
   displayName: 'Build - dotnet build application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs:
     command: 'build'
     projects: '${{ parameters.SolutionBaseName }}\${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o "$(build.artifactstagingdirectory)\Build\${{ parameters.SolutionBaseName }}\" -c "${{ parameters.BuildConfiguration }}"'

 - task: ArchiveFiles@2
   displayName: 'Archive Application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs: 
     rootFolderOrFile: $(build.artifactstagingdirectory)\Build\${{ parameters.SolutionBaseName }}\
     archiveFile: $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\DeploymentPackages\${{ parameters.SolutionBaseName }}.zip
     includeRootFolder: false

# task to package a web app
 - task: DotNetCoreCLI@2
   displayName: 'Publish - dotnet publish application ${{ parameters.SolutionBaseName }}'
   condition: ${{ parameters.PublishWebApp }}
   inputs:
     command: 'publish'
     projects: '${{ parameters.SolutionBaseName }}\${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o "$(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\DeploymentPackages\\" -c "${{ parameters.BuildConfiguration }}"'
     publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

 - task: DotNetCoreCLI@2
   displayName: 'Test - dotnet test application ${{ parameters.SolutionBaseName }}'
   inputs:
     command: test
     projects: '${{ parameters.SolutionBaseName }}.${{ parameters.TestSuffix }}\${{ parameters.SolutionBaseName }}.${{ parameters.TestSuffix }}.csproj'
     arguments: '--configuration ${{ parameters.BuildConfiguration }} --collect "Code coverage"'

 - task: CopyFiles@2
   displayName: 'Copy Files to: $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\Azure'
   inputs:
     sourceFolder: 'Resources'
     contents: '**'
     targetFolder: '$(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\Azure'

 - task: PublishBuildArtifacts@1
   displayName: 'Publish Artifact: ${{ parameters.SolutionBaseName }}'
   inputs:
     pathtoPublish: $(build.artifactstagingdirectory)\Artifact\${{ parameters.SolutionBaseName }}\
     artifactName: ${{ parameters.SolutionBaseName }}
     publishLocation: container